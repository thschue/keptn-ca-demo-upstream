{{ $componentName := "hat" }}
{{ $repoBasename := .Values.hat.repositoryBasename }}
{{ $repoTag := .Values.hat.tag }}
{{ $env := .Values.hat.env }}
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ printf "%s-%s" (include "podtato-head.fullname" .) $componentName }}
  labels:
    {{- include "podtato-head.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ printf "%s-%s" (include "podtato-head.fullname" .) $componentName }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "podtato-head.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ printf "%s-%s" (include "podtato-head.fullname" .) $componentName }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "podtato-head.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/part-of: "{{ .Values.keptn.project }}"
        app.kubernetes.io/component: {{ printf "%s-%s" (include "podtato-head.fullname" .) $componentName }}
    spec:
      {{- with .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 5
      serviceAccountName: {{ include "podtato-head.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ printf "%s-%s" (include "podtato-head.fullname" .) $componentName }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.images.repositoryDirname }}/{{ $repoBasename }}:{{ $repoTag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DT_CUSTOM_PROP
              value: "keptn_version={{ .Values.keptn.version }} keptn_project={{ .Values.keptn.project }} keptn_service={{ .Values.keptn.service }} keptn_stage={{ .Values.keptn.stage }}"
            - name: DEPLOYMENT_NAME
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.labels['deployment']"
            - name: DT_RELEASE_VERSION
              value: "{{ .Values.keptn.version }}"
            - name: DT_RELEASE_PRODUCT
              value: "{{ .Values.keptn.service }}"
            - name: DT_RELEASE_STAGE
              value: "{{ .Values.keptn.stage }}"
          {{- if $env }}
            {{- toYaml $env | nindent 12 }}
          {{- end }}
  strategy:
    blueGreen:
      activeMetadata:
        labels:
          role: active
      previewMetadata:
        labels:
          role: preview
      # activeService specifies the service to update with the new template hash at time of promotion.
      # This field is mandatory for the blueGreen update strategy.
      activeService: {{ printf "%s-%s" "podtato-head" $componentName }}
      # previewService specifies the service to update with the new template hash before promotion.
      # This allows the preview stack to be reachable without serving production traffic.
      # This field is optional.
      previewService: {{ printf "%s-%s" "podtato-head" $componentName }}-preview
      # autoPromotionEnabled disables automated promotion of the new stack by pausing the rollout
      # immediately before the promotion. If omitted, the default behavior is to promote the new
      # stack as soon as the ReplicaSet are completely ready/available.
      # Rollouts can be resumed using: `kubectl argo rollouts promote ROLLOUT`
      autoPromotionEnabled: false